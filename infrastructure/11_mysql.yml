AWSTemplateFormatVersion: '2010-09-09'
Description: deploys MySQL server.
Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  InstanceType:
    Description: Which instance type should we use to build the ECS cluster?
    Type: String
    Default: t3.medium
  ClusterSize:
    Description: How many ECS hosts do you want to initially deploy?
    Type: Number
    Default: 1
  EC2KeyName:
    Description: AWS ec2 key name
    Type: String
    Default: key-name
  MysqlTag:
    Description: the MySQL ECR tag
    Type: String
    Default: 190401
Mappings:
  # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
  ImageIdByRegion:
    us-east-1:
      HVM64: ami-0a6a36557ea3b9859
    ap-northeast-1:
      HVM64: ami-0e52aad6ac7733a6a
Resources:
  ############################################
  #####               EC2                #####
  ############################################
  EC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Instance for ECS Cluster
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              git: []
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main] 
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: Sub !
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EcsInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
                runas=root
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      ImageId: !FindInMap [ ImageIdByRegion , !Ref 'AWS::Region' , HVM64 ]
      InstanceType: !Ref InstanceType
      IamInstanceProfile:
        Fn::ImportValue:
          !Sub ${AWS::AccountId}-${AWS::Region}-${EnvironmentName}-ec2-profile
      KeyName: !Ref EC2KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo ECS_CLUSTER=${EnvironmentName}-ecs-cluster >> /etc/ecs/ecs.config
          echo ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=1m >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          # Signal the status from cfn-init
          # https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/cfn-signal.html
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
      NetworkInterfaces:
        - GroupSet:
            - Fn::ImportValue:
                !Sub ${AWS::AccountId}-${AWS::Region}-${EnvironmentName}-ecs-host-sg
          AssociatePublicIpAddress: false
          DeviceIndex: 0
          DeleteOnTermination: true
          SubnetId:
            Fn::ImportValue:
              !Sub ${AWS::AccountId}-${AWS::Region}-${EnvironmentName}-private-subnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ec2-mysql
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
  ############################################
  #####         Task Definition          #####
  ############################################
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - EC2Instance
    Properties:
      NetworkMode: awsvpc
      RequiresCompatibilities: [ EC2 ]
      TaskRoleArn:
        Fn::ImportValue:
          !Sub ${AWS::AccountId}-${AWS::Region}-${EnvironmentName}-ecs-task-role
      ExecutionRoleArn:
        Fn::ImportValue:
          !Sub ${AWS::AccountId}-${AWS::Region}-${EnvironmentName}-ecs-task-role
      ContainerDefinitions:
        - Name: mysql
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/mysql:${MysqlTag}
          PortMappings:
            - ContainerPort: 3306
              HostPort: 3306
          MemoryReservation: 2048
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Fn::ImportValue:
                  !Sub ${AWS::AccountId}-${AWS::Region}-${EnvironmentName}-log-group
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Sub ${EnvironmentName}-mysql
          Environment:
            - Name: "MYSQL_ALLOW_EMPTY_PASSWORD"
              Value: "yes"
            - Name: "MYSQL_DATABASE"
              Value: "HOGEHOGE"
            - Name: "MYSQL_USER"
              Value: "PIYOPIYO"
            - Name: "MYSQL_PASSWORD"
              Value: "FOOFOO"
  ############################################
  #####             Service              #####
  ############################################
  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - EC2Instance
    Properties:
      LaunchType: EC2
      DesiredCount: !Ref ClusterSize
      Cluster:
        Fn::ImportValue:
          !Sub ${AWS::AccountId}-${AWS::Region}-${EnvironmentName}-ecs-cluster
      TaskDefinition: !Ref TaskDefinition
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscovery.Arn
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Sub ${AWS::AccountId}-${AWS::Region}-${EnvironmentName}-ecs-backend-sg
          Subnets:
            - Fn::ImportValue:
                !Sub ${AWS::AccountId}-${AWS::Region}-${EnvironmentName}-private-subnet1
  ############################################
  #####        Service Discovery         #####
  ############################################
  ServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: mysql
      DnsConfig:
        DnsRecords: [{Type: A, TTL: "10"}]
        NamespaceId:
          Fn::ImportValue:
            !Sub ${AWS::AccountId}-${AWS::Region}-${EnvironmentName}-pdn
      HealthCheckCustomConfig:
        FailureThreshold: 1