AWSTemplateFormatVersion: '2010-09-09'
Description: contains the security groups required by our entire stack. We create them in a seperate nested template, so they can be referenced by all of the other nested templates.
Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
Resources:
  ############################################
  #####          Security Group          #####
  ############################################
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the load balancer that sits in front of ECS
      GroupName: !Sub ${EnvironmentName}-loadBalancer-sg
      VpcId:
        Fn::ImportValue:
          !Sub ${AWS::AccountId}-${AWS::Region}-${EnvironmentName}-vpc
      SecurityGroupIngress:
        - IpProtocol: -1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-loadBalancer-sg
  ECSProxySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-ecs-proxy-sg
      GroupDescription: Access to the reverse proxy server
      VpcId:
        Fn::ImportValue:
          !Sub ${AWS::AccountId}-${AWS::Region}-${EnvironmentName}-vpc
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          FromPort: 0
          ToPort: 65535
          IpProtocol: tcp
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ecs-proxy-sg
  ECSHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-ecs-host-sg
      GroupDescription: Access to the ECS hosts and the tasks/containers that run on them
      VpcId:
        Fn::ImportValue:
          !Sub ${AWS::AccountId}-${AWS::Region}-${EnvironmentName}-vpc
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          FromPort: 0
          ToPort: 65535
          IpProtocol: tcp
        - SourceSecurityGroupId: !Ref ECSProxySecurityGroup
          FromPort: 0
          ToPort: 65535
          IpProtocol: tcp
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ecs-host-sg
  ECSBackendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-ecs-backend-sg
      GroupDescription: Access to the database server
      VpcId:
        Fn::ImportValue:
          !Sub ${AWS::AccountId}-${AWS::Region}-${EnvironmentName}-vpc
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref ECSHostSecurityGroup
          # For MySQL
          FromPort: 3306
          ToPort: 3306
          IpProtocol: tcp
        - SourceSecurityGroupId: !Ref ECSHostSecurityGroup
          # For redis
          FromPort: 6379
          ToPort: 6379
          IpProtocol: tcp
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ecs-backend-sg
Outputs:
  LoadBalancerSecurityGroup:
    Description: A reference to the security group for load balancers
    Value: !Ref LoadBalancerSecurityGroup
    Export:
      Name: !Sub ${AWS::AccountId}-${AWS::Region}-${EnvironmentName}-loadBalancer-sg
  ECSProxySecurityGroup:
    Description: A reference to the security group for reverse proxy server
    Value: !Ref ECSProxySecurityGroup
    Export:
      Name: !Sub ${AWS::AccountId}-${AWS::Region}-${EnvironmentName}-ecs-proxy-sg
  ECSHostSecurityGroup:
    Description: A reference to the security group for task/containers
    Value: !Ref ECSHostSecurityGroup
    Export:
      Name: !Sub ${AWS::AccountId}-${AWS::Region}-${EnvironmentName}-ecs-host-sg
  ECSBackendSecurityGroup:
    Description: A reference to the security group for database server
    Value: !Ref ECSBackendSecurityGroup
    Export:
      Name: !Sub ${AWS::AccountId}-${AWS::Region}-${EnvironmentName}-ecs-backend-sg